"SPDX-FileCopyrightText: 2021-2022 UnionTech Software Technology Co.,Ltd.",
"Unilang test script.";

$import! std.math &=? &<? &<=? &>? &>=? &stoi &itos;

$def! $rem $vau . #ignore "";

info "sanity";
subinfo "empty expression";
$expect ();
subinfo "zeros";
$expect 0 0;
$expect 0 +0;
$expect 0 -0;
$expect 0 00;
$expect 0.0 0.0;
$expect 0.0 +0.0;
$expect 0.0 0.00;
$expect 0.0 00.0;
$expect -0.0 -0.0;
subinfo "id expressions";
$expect 42 $let ((a 42)) a;
$expect 42 $let (('' 42)) '';
$expect 42 $let ((' ' 42)) ' ';

info "function calls";
() $let ()
(
	subinfo "basic combiner calls";
	$defl! g fm apply - (idv fm);
	$defv! $g fm #ignore eval (list* - fm) (() get-current-environment);
	$expect (- 0 1) g 2 3;
	$expect (- 0 1) $g 3 4;
	subinfo "empty name of dynamic environments;" " fixed since V0.12.145";
	() ($vau () '' '');
	subinfo "combiner rvalue calls";
	$expect () ($lambda (x) forward! x) ();
	$expect () ($lambda (x) ($lambda (y) idv y) x) ();
	$expect () ($lambda (x) ($lambda (y) id y) x) ();
	$expect "" ($lambda (x) ($lambda (y) ++ y) x) "";
	$expect () ($lambda (x) ($lambda (y)) x) ();
	$expect () ($lambda (x) ($lambda (.)) x) ();
	$expect () ($lambda (x) ($lambda (.) ()) x) ();
	$expect () ($lambda (x) ($lambda (y) y) x) ();
	$expect () ($lambda (x) ($lambda (y) (idv y)) x) ();
	$expect ()
		($def! foo $lambda (z) z; ($lambda (x) ($lambda (y) foo y) x) ());
	$expect () ($lambda (x) ($lambda (y) ($lambda (z) z) y) x) ();
	$expect () ($def! l list (); ($lambda ((&x .)) x) l);
	subinfo "combiner subobjects of vau prvalue incorrectly moved;"
		" fixed since V0.12.74";
	$let ((f $lambda (x) x))
	(
		(idv (unwrap f)) 1;
		$expect 42 (f 42)
	);
	subinfo "apply";
	$expect 42 apply list% 42;
	$expect (list 1 2) apply list% (list% 1 2);
	$expect (cons 1 2) apply list% (cons% 1 2);
	$expect (list* 1 2 3) apply list% (list* 1 2 3);
	subinfo "apply and apply-list trailing irregular representation";
	$let* ((e () get-current-environment) (l list () e))
	(
		$expect 42 eval% (list*% (unwrap apply) list% 42 (rest& l)) e;
		$expect () eval% (list*% (unwrap apply-list) list% () (rest& l)) e
	)
);

info "recursive function calls";
$let ()
(
	subinfo "Fibonacci";
	$defl! fib (&n) $if (<=? n 1) 1 (+ (fib (- n 1)) (fib (- n 2)));
	$expect 8 fib 5;
	subinfo "Hofstadter Female and Male sequences";
	$def! (F M) (list ($lambda (&n) $if (eqv? n 0) 1 (- n (M (F (- n 1)))))
		($lambda (&n) $if (eqv? n 0) 0 (- n (F (M (- n 1))))));
	$expect 5 F 7;
	$expect 4 M 7
);

info "basic object operations";
subinfo "equal?";
$let ((a 2))
(
	$check equal? () ();
	$check equal? 1 1;
	$check equal? (list 2) (list 2);
	$check equal? (list% a) (list a);
	$check-not equal? 1 2;
	$check-not equal? (list 1 2) 3;
	$check-not equal? (list 1 2) (list 3 4);
	$check equal? #t (equal? (list 1 2) (list 1 2));
	$check equal? (cons 2 2) (cons% 2 2);
	$check equal? (cons% 2 2) (cons% 2 2);
	$check-not equal? (cons 2 2) (cons% 2 3);
	$check-not equal? (cons% 2 2) (cons% 2 3)
);
subinfo "fwd?";
$let ()
(
	$def! fwd? $vau% (&x) d
		($lambda% (%v) bound-lvalue? ($resolve-identifier v)) (eval% x d);
	$expect (list% #f #f #t #t #f)
		list% (fwd? 1) (fwd? ()) (fwd? fwd?) (fwd? (id fwd?))
			(fwd? (idv fwd?))
);

info "reference and assignment operations";
$let* (((a b) list 1 2) (li list% a 2) (lie list% (expire a) 2))
(
	subinfo "expecting different results for 'first&' and 'first@'";
	$check-not eq? (first& li) (first@ li);
	subinfo "collapsing test";
	$let ((lic list% (as-const a) 2))
	(
		$check reference? (first@ li);
		$check uncollapsed? (first@ li);
		$check reference? (idv (first@ li));
		$check-not uncollapsed? (idv (first@ li));
		$check-not unique? (collapse (expire (first@ li)));
		$check unique? (collapse (expire (first@ lie)));
		$check-not unique? (collapse (first@ li));
		$check unique? (collapse (expire (first@ lie)));
		$check modifiable? (collapse (first@ li));
		$check-not modifiable? (collapse (first@ lic));
		$check-not modifiable? (collapse (as-const (first@ lic)));
		subinfo "collapsed nonmodifying values;" " fixed since V0.11.16";
		$check-not modifiable? (collapse (as-const (first@ li)));
		subinfo "collapsed value category";
		$check-not unique? (collapse (first@ lie))
	);
	subinfo "expecting prvalue for reference to reference";
	$expect 1 idv (idv (first@ li));
	$expect 1 idv (idv ((wrap ($vau% (%x) #ignore x)) (first@ li)));
	$expect 1 idv (idv (($lambda% (%x) x) (first@ li)));
	subinfo "id and reference tests";
	$def! a 1;
	$def! b 2;
	$def! li list% a 2;
	assign@! b (first@ li);
	$check-not eqv? (id b) 1;
	$def! b 2;
	$def! li list% a 2;
	assign@! b (first@ li);
	$check reference? (id b);
	$def! b 2;
	$def! li list% a 2;
	assign@! b (first@ li);
	$check uncollapsed? (id b);
	$def! b 2;
	$def! li list% a 2;
	assign@! b (first@ li);
	$check eqv? (idv (idv (id b))) 1;
	subinfo "idv move! tests";
	$check eqv? (idv (move! 42)) 42;
	$def! b 2;
	$def! li list% a 2;
	assign@! b (first@ li);
	$check eqv? (idv (move! b)) 1;
	$def! b 2;
	$def! li list% a 2;
	assign@! b (first@ li);
	$check-not reference? (idv (move! b));
	subinfo "move! tests";
	$def! b 2;
	$def! li list% a 2;
	assign@! b (first@ li);
	$check eqv? (move! b) 1;
	$def! b 2;
	$def! li list% a 2;
	assign@! b (first@ li);
	$check reference? (move! b);
	$def! b 2;
	$def! li list% a 2;
	assign@! b (first@ li);
	$check-not uncollapsed? (move! b);
	subinfo "preventing non-first-class temporary objects";
	$let ()
	(
		$defl! test-nt (&f)
			$let ((&t (idv unit)) (&u (idv unit)) (&v (idv unit)))
			(
				$def! x f t;
				forward! x;
				$expect unit x;
				assign@! x (f u);
				forward! x;
				$expect unit x;
				assign%! x (f v);
				forward! x;
				$expect unit x
			);
		test-nt move!;
		test-nt forward!
	)
);

info "environment operations";
subinfo "eval";
$expect 42 eval 42 (() get-current-environment);
$expect 42 eval% 42 (() get-current-environment);
subinfo "eval lists";
$expect 1 eval (list 1) (() get-current-environment);
$expect (cons 1 2) eval (list cons 1 2) (() get-current-environment);
$expect (list 1 2) eval (list list 1 2) (() get-current-environment);

info "combiner operations";
subinfo "combiner equality";
$let ()
(
	$check eqv? (idv idv) idv;
	$check not? (eqv? (wrap idv) idv);
	$check eqv? (wrap idv) (wrap idv);
	$check eqv? (unwrap unwrap) (unwrap unwrap);
	$def! $quote $vau% (x) #ignore $move-resolved! x;
	$def! idv wrap $quote;
	$check eqv? (unwrap idv) $quote;
	$check eqv? (unwrap (idv idv)) $quote;
	$check eqv? (unwrap idv) (unwrap (idv idv));
	$check eqv? (wrap (unwrap idv)) idv;
);
subinfo "unwrap propagation of nonmodifiable references of irregular"
	" representation;" "fixed derivation since V0.12.77";
$check-not modifiable? (unwrap id);
subinfo "self-evaluation on nested one-element list of irregular"
	" representations;" " fixed since V0.11.97";
$expect (unwrap id) eval% (list% (unwrap id)) (() get-current-environment);

info "make-encapsulation-type";
subinfo "encapsulation values";
$let ()
(
	$def! (e p? d) () make-encapsulation-type;
	p? 1;
	$def! enc e 1;
	$check p? enc;
	$check-not p? "str";
	$expect 1 d enc;
	$expect 2 d (e 2);
	$check eqv? (e (list 1 2)) (e (list 1 2));
	$check-not eqv? (e (list 1 2)) (e (list 3 4))
);
subinfo "encapsulation temporary values";
$let ((u unit) (&lt unit) (&t (idv unit)))
(
	$def! (e% #ignore d) () make-encapsulation-type;
	$def! o e% u;
	forward! (d o);
	$expect unit d o;
	$def! o e% lt;
	forward! (d o);
	$expect unit d o;
	$def! o e% t;
	forward! (d o);
	$expect-moved d o
);
subinfo "encapsulation equality";
$let ()
(
	$def! (e #ignore d) () make-encapsulation-type;
	$def! x e 1;
	$def! y e 2;
	$def! z e 2;
	$check-not eqv? x y;
	$check eqv? y z
);

info "logical operations";
$let ()
(
	subinfo "logical not";
	$check eqv? ($let ((f #f)) not? f) (not? #f);
	subinfo "non-strict logical operations";
	$check () $and;
	$check-not () $or;
	$check-not $and #f #f;
	$check $or #f #t;
	$expect 2 $and 1 2;
	$expect 1 $or 1 #f;
	$expect 2 $or #f 2 #f 3
);

info "list operations";
subinfo "empty list calls: list and list%";
$expect () () list;
$expect () () list%;
subinfo "empty list calls: list* and list%*";
$expect () list* ();
$expect () list*% ();
subinfo "list*% reference preserving;" " fixed since V0.12.78";
$check reference? (list*% id);
subinfo "list underlying opeative evaluations";
$expect 1 eval (list*% (unwrap list%) 1) (() get-current-environment);
$expect 1 eval (list*% () (unwrap list%) 1) (() get-current-environment);
$expect (cons 1 2)
	eval ((unwrap list%) (cons 1 2)) (() get-current-environment);
$expect (cons 1 2) eval (list*% (unwrap list) 1 2) (() get-current-environment);
$expect (cons 1 2)
	eval (list*% (unwrap list%) 1 2) (() get-current-environment);
subinfo "improper list cons";
$expect (cons (list 1 2) 4) cons (list 1 2) 4;
$let* ((a 1) (b 4) (l list% a 2)) $expect (cons (list 1 2) 4) cons l b;
$let ((n 1))
(
	$let ((a list 2 3))
	(
		subinfo "list lvalue elements accesses";
		$expect 2 first (id a);
		$expect 2 first a;
		$check reference? (first a);
		$check reference? (first% (list% n 2));
		subinfo "list xvalue elements accesses";
		$expect 2 first (as-const (expire a));
		$expect 2 first (expire a);
		$expect-moved first a
	);
	subinfo "first@ and first& xvalues";
	$let ((l0 list n) (l1 list% n) (l2 list% (expire n)))
	(
		subinfo "first@ unique";
		$check-not unique? (first@ l0);
		$check-not unique? (first@ l1);
		$check-not unique? (first@ l2);
		subinfo "first@ xvalue";
		$check unique? (first@ (expire l0));
		$check unique? (first@ (expire l1));
		$check unique? (first@ (expire l2));
		subinfo "first& unique";
		$check-not unique? (first& l0);
		$check-not unique? (first& l1);
		$check unique? (first& l2);
		subinfo "first& xvalue";
		$check-not unique? (first& (expire l1));
		$check unique? (first& (expire l2));
		subinfo "first& non-reference element unique preserving";
		$check unique? (first& (expire l0))
	);
	subinfo "rest& xvalues";
	$let ((l0 list n n) (l1 list% n n) (l2 list% (expire n)
		(expire n)) (l3 cons% (expire n) (expire n)))
	(
		subinfo "rest& unique";
		$check-not unique? (rest& l0);
		$check-not unique? (rest& l1);
		$check-not unique? (rest& l2);
		subinfo "rest& unique element preservation";
		$check unique? (rest& l3);
		subinfo "rest& xvalue";
		$check unique? (rest& (expire l0));
		$check unique? (rest& (expire l1));
		$check unique? (rest& (expire l2));
		$check unique? (rest& (expire l3))
	);
	subinfo "first forwarding";
	$let ()
	(
		$defl! test (f)
		(
			$def! li list% (expire (as-const n)) 2;
			$check not? (modifiable? (f li));
			$check unique? (f li);
			$expect 1 f li
		);
		test first;
		test first&
	)
);
subinfo "improper list access";
$expect (cons% 2 3) restv (list*% 1 2 3);
$let ((a 1)) $check eq? (rest% (cons% 2 a)) a;
subinfo "list modification";
$let* ((a 1) (b 4) (l list% a 2))
(
	set-first%! l b;
	$expect (list b 2) l;
	set-first%! l 7;
	$expect (list 7 2) l
);

info "bindings operations";
() $let ()
(
	$expect () $let ();
	$expect 5 $let ((&x 2) (&y 3)) + x y;
	$expect 4 $let* ((&x 2) (&y x)) + x y;
	$expect 3 $letrec ((x + 0 1) (x 2) (x - 4 1)) x;
	$expect (list 1 2 3) $letrec ((x + 0 1) (y 2) (z - 4 1)) list x y z
);

info "std.promises";
$let ()
(
	$import! std.promises
		promise? memoize $lazy $lazy% $lazy/d $lazy/d% force;
	subinfo "value category preservation";
	$let ((p1 $lazy% idv unit))
	(
		$expect unit force unit;
		$expect unit force ($lazy p1);
		force (expire p1);
		$expect-moved force ($lazy p1)
	);
	subinfo "force idempotence";
	$let ((a unit))
	(
		$def! p $lazy a;
		$expect (force p) force p;
	);
	subinfo "lifting safety";
	$let ()
	(
		$defl! me ()
		(
			$def! e () make-environment;
			$set! e x 42;
			e
		);
		$expect 42 force ($lazy/d (() me) x);
		$expect 42 force ($lazy% $lazy/d (() me) x);
		$expect 42 force ($lazy $lazy/d% (() me) x)
	);
	subinfo "test #1 (as RnRK)";
	$let ()
	(
		$def! (box% box? unbox) () make-encapsulation-type;
		$def! env_tmp_ $provide! (get-count pb) $sequence
			($def! count 5)
			($defl! get-count () count)
			($def! p ($let ((self () get-current-environment))
				(
					$set! self saved_ () lock-current-environment;
					$lazy $if (<=? count 0) count
						($sequence
							($set! self count (- count 1))
							(force p)
							($set! self count (+ count 2))
							count)
				)
			))
			($def! pb box% p);
		$expect 5 () get-count;
		$expect 0 force (unbox pb);
		$expect 10 () get-count;
	);
	subinfo "resolved referencing shared state move;" " fixed since V0.8.57";
	$let ()
	(
		$def! p1 $lazy unit;
		$def! p2 $lazy% p1;
		$let* ((a force p2) (b force p1) (c force (move! p2)))
			$expect (list unit unit unit unit) list a b c (force p1)
	)
);

info "std.strings tests";
$let ()
(
	$import! std.strings string-empty? ++;
	$check string-empty? "";
	$check-not string-empty? "x";
	$expect "abc123" ++ "a" "bc" "123"
);

info "Documented examples.";
$let ()
(
	display "Hello, world!";
	display (display "Hello, world!");
	(display "Hello, world!");
	() newline;
	() display "Hello, world!";
	display "Hello, world!";
	$sequence display "Hello, world!";
	display "Hello, "; display "world!";
	$sequence (display "Hello, ") (display "world!");
	$def! x "hello";
	list "hello" "world";
	cons "x" ();
	list "x";
	cons "x" (cons "y" ());
	list "x" "y";
	$lambda (x) display x;
	$lambda (x) x;
	($lambda (x) display x);
	($lambda (x) (display x));
	$lambda (x y) $sequence (display x) (display y);
	$def! id $lambda (x) x;
	display (($lambda ((x y)) x) (list "hello" "world"));
	$def! car $lambda ((x .)) x; $def! cdr $lambda ((#ignore .x)) x;
	eval (list display "Hello, world!") (() get-current-environment);
	$def! (x y) list "hello" "world"; display x; display y;
	$def! id $lambda (x) x;
	$defl! id (x) x;
	$def! x (); display "x is "; display ($if (null? x) "empty" "not empty")
);

info "Test case on parent environment search.";
$let ()
(
	$def! e make-environment (() get-current-environment);
	eval ((unwrap ($lambda (x) x)) e) e
);

info "typing library tests";
subinfo "type?";
$check type? Any;
$check type? List;
$check type? String;
$check type? Number;
subinfo "has-type?";
$check has-type? () Any;
$check has-type? () List;
$check not? (has-type? "" List);
$check (has-type? "" String);
$check has-type? 0 Number;
subinfo "typed-ptree->ptree";
$expect ((unwrap idv) (x))
	(typed-ptree->ptree ((unwrap idv) (x)));
$expect ((unwrap idv) x)
	(typed-ptree->ptree ((unwrap idv) (x : Any)));
$expect ((unwrap idv) (x))
	(typed-ptree->ptree ((unwrap idv) ((x : Any))));
$expect ((unwrap idv) (a n s))
	(typed-ptree->ptree ((unwrap idv) (a n s)));
$expect ((unwrap idv) ((x y z) a n s))
	(typed-ptree->ptree
		((unwrap idv) ((x y z) a n s)));
$expect ((unwrap idv) ((x y z) a n s))
	(typed-ptree->ptree
		((unwrap idv) ((x (y : List) z) (a : Any) (n : Number) s)));
$expect ((unwrap idv) ((x y z) a n s))
	(typed-ptree->ptree
		((unwrap idv) ((x, y : List, z), a : Any, n : Number, s)));

info "typed operations tests";
$let ()
(
	$def! nid lambda ((x : Number)) x;
	$expect 42 nid 42;
	$def! streq? lambda ((x : String) y) eqv? x y;
	$check streq? "x" "x"
);

info "dependency library tests";
$let ()
(
	$expect "1.2.3" version->string (string->version "1.2.3");

	$def! dep-core
		make-dependency "core" (string->version "0.0.1") ($lambda (.) #t);

	$expect "core" name-of dep-core;
	$expect "0.0.1" version->string (version-of dep-core);

	$def! dep-comp1
		make-dependency "comp1" (string->version "0.0.2")
		(strings->dependency-contract "core" "> 0.0.0" "<	0.0.4" "0.0"
			"=0.0.1" "= 0" "	*" "0.*");
	$def! dep-comp2
		make-dependency "comp2" (string->version "0.0.3")
		(strings->dependency-contract "core" ">= 0.0.1" "0.0.*");

	$check validate dep-comp1 dep-core;
	$check validate dep-comp2 dep-core;

	$def! depset1 make-dependency-set dep-comp1 dep-comp2;

	$check has-dependency? depset1 "comp1";
	$check-not has-dependency? depset1 "comp1" (string->version "0.0.1");
	$check has-dependency? depset1 "comp1" (string->version "0.0.2");
	$check-not has-dependency? depset1 "comp3"
);

